import numpy as np
import pandas as pd
from sklearn.metrics import mean_squared_error, mean_absolute_error
from sklearn.tree.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from math import sqrt
from sklearn.preprocessing import OneHotEncoder
from sklearn.ensemble import RandomForestRegressor
from sklearn.neural_network import multilayer_perceptron as mlp
import warnings

warnings.filterwarnings("ignore")
warnings.filterwarnings(action='ignore', category=DeprecationWarning)
warnings.filterwarnings(action='ignore', category=FutureWarning)

train_X = pd.read_csv("D:/Downloads/engr421_dasc521_fall2019_hw06/training_data.csv")
test_X = pd.read_csv("D:/Downloads/engr421_dasc521_fall2019_hw06/test_data.csv")

# train_data = np.array(train_X)
# test_data = np.array(test_X)
#
# X = np.array(train_data[:, 1:6])
# Y = np.array(train_data[:, 6])

train_Y = train_X['TRX_COUNT']

train_X.drop(['TRX_COUNT'], axis=1, inplace=True)

x = pd.concat([train_X, pd.get_dummies(train_X['IDENTITY'], prefix='IDENTITY')], axis=1)
x.drop(['IDENTITY'], axis=1, inplace=True)

x.insert(0, 'WEEKEND',
         x.apply(lambda row: 0 if (pd.Timestamp(row['YEAR'], row['MONTH'], row['DAY']).weekday() <= 5) else 1, axis=1))

# print(x.shape)

# x = pd.concat([x, pd.get_dummies(x['TRX_TYPE'], prefix='TRX_TYPE')], axis=1)
# x.drop(['TRX_TYPE'], axis=1, inplace=True)
#
# x = pd.concat([x, pd.get_dummies(x['REGION'], prefix='REGION')], axis=1)
# x.drop(['REGION'], axis=1, inplace=True)

# x = pd.concat([x, pd.get_dummies(x['MONTH'], prefix='MONTH')], axis=1)
# x.drop(['MONTH'], axis=1, inplace=True)

# print(x.shape)

x_train = np.array(x)
y_train = np.array(train_Y)

X_train, X_test, Y_train, Y_test = train_test_split(x_train, y_train, test_size=0.02, random_state=0)

model = RandomForestRegressor(n_estimators=10, max_depth=10, random_state=0)
# model = mlp.MLPRegressor(hidden_layer_sizes=(8, 4))
# model = mlp.MLPRegressor(hidden_layer_sizes=(7,), learning_rate_init=1e-3, random_state=0, tol=1e-4, n_iter_no_change=10, epsilon=1e-6, max_iter=200)

model.fit(X_train, Y_train)
y_predict = model.predict(X_test)
rmse = sqrt(mean_squared_error(Y_test, y_predict))
mae = mean_absolute_error(Y_test, y_predict)
print("Cross validation RMSE:")
print(rmse)
print(mae)
# print(y_predict)

# print(test_X.shape)

y = pd.concat([test_X, pd.get_dummies(test_X['IDENTITY'], prefix='IDENTITY')], axis=1)
y.drop(['IDENTITY'], axis=1, inplace=True)

y.insert(0, 'WEEKEND',
         y.apply(lambda row: 0 if (pd.Timestamp(row['YEAR'], row['MONTH'], row['DAY']).weekday() <= 5) else 1, axis=1))

# print(y.shape)

# y = pd.concat([y, pd.get_dummies(y['TRX_TYPE'], prefix='TRX_TYPE')], axis=1)
# y.drop(['TRX_TYPE'], axis=1, inplace=True)
#
# x = pd.concat([x, pd.get_dummies(x['REGION'], prefix='REGION')], axis=1)
# x.drop(['REGION'], axis=1, inplace=True)

# y = pd.concat([y, pd.get_dummies(y['MONTH'], prefix='MONTH')], axis=1)
# y.drop(['MONTH'], axis=1, inplace=True)
# print(y.shape)

x_test = np.array(y)
# print(x_test.shape)

y_test = y_train[0:940]

y_predicted = model.predict(x_test)
rmse = sqrt(mean_squared_error(y_test, y_predicted))
mae = mean_absolute_error(y_test, y_predicted)
print("Test data RMSE:")
print(rmse)
print(mae)
